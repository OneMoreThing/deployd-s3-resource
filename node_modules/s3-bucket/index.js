var knox = require('knox')
  , Resource = require('deployd/lib/resource')
  , util = require('util')

function S3Bucket(name, options) {
  Resource.apply(this, arguments);
  this.client = knox.createClient({
      key: this.config.key
    , secret: this.config.secret
    , bucket: this.config.bucket
  });

}
util.inherits(S3Bucket, Resource);
module.exports = S3Bucket;

S3Bucket.prototype.clientGeneration = true;

S3Bucket.prototype.handle = function (ctx, next) {
  var req = ctx.req
    , bucket = this;

  if (req.method === "POST" || req.method === "PUT") {
    if (!ctx.res) return next(); // This definitely has to be HTTP.
    var headers = {
        'Content-Length': req.headers['content-length']
      , 'Content-Type': req.headers['content-type']
    };

    // ctx.res.setHeader('Content-Type', headers['Content-Type']);
    // ctx.res.setHeader('Content-Length', headers['Content-Length']);
    // req.on('data', function(data) {
    //   ctx.res.write(data); 
    // }).on('end', function() {
    //   ctx.res.end();
    // });
    // req.resume();

    this.client.putStream(req, ctx.url, headers, function(err, res) { 
      if (err) return ctx.done(err);
      if (res.statusCode !== 200) {
        bucket.readStream(res, function(err, message) {
          ctx.done(err || message);
        });
      }
    });
    req.resume();
  } else if (req.method === "GET") {
    if (!ctx.res) return next(); // This definitely has to be HTTP.
    this.client.get(ctx.url).on('response', function(res) {
      if (res.statusCode === 200) {
        res.pipe(ctx.res); 
      } else {
        bucket.readStream(res, function(err, message) {
          ctx.done(err || message);
        });
      }
    }).on('error', function(err) {
      ctx.done(err);
    }).end();
  } else if (req.method === "DELETE") {
    this.client.deleteFile(ctx.url, function(err, res) {
      if (err) ctx.done(err);
      if (res.statusCode !== 200) {
        bucket.readStream(res, function(err, message) {
          ctx.done(err || message);
        });
      } else {
        ctx.done();
      }
    });
  } else {
    next();
  }
}

S3Bucket.prototype.readStream = function(stream, fn) {
  var buffer = '';
  stream.on('data', function(data) {
    buffer += data;
  }).on('end', function() {
    fn(null, buffer);
  }).on('error', function(err) {
    fn(err);
  });
};
